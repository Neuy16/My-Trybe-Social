{"version":3,"sources":["utils/queries.js","pages/Home.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Profile.js","pages/Register.js","pages/UserHome.js","components/Header/index.js","components/Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["QUERY_SINGLE_USER","gql","QUERY_ME","User","userId","useParams","useQuery","variables","loading","data","user","me","username","className","to","LOGIN_USER","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","decoded","console","log","setItem","window","location","assign","_id","reload","LoginForm","props","useState","password","formState","setFormState","useMutation","loginUser","error","handleChange","event","target","name","value","handleFormSubmit","preventDefault","stopPropagation","Auth","login","onSubmit","placeholder","type","onChange","required","style","cursor","message","Profile","fetchPolicy","Register","firstName","lastName","email","addUser","UserHome","Header","Footer","client","ApolloClient","request","operation","setContext","headers","authorization","uri","cache","InMemoryCache","App","ApolloProvider","path","element","Home","Login","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e40c3dd.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_USERS = gql`\r\n  query allUsers {\r\n    users {\r\n      _id\r\n      firstName\r\n      lastName\r\n      username\r\n      email\r\n      profilePicture\r\n      friends {\r\n        _id\r\n        firstName\r\n        lastName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_SINGLE_USER = gql`\r\n  query singleUser($userId: ID!) {\r\n    user(userId: $userId) {\r\n      _id\r\n      firstName\r\n      lastName\r\n      username\r\n      email\r\n      profilePicture\r\n      friends {\r\n        _id\r\n        firstName\r\n        lastName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      firstName\r\n      lastName\r\n      username\r\n      email\r\n      profilePicture\r\n      friends {\r\n        _id\r\n        firstName\r\n        lastName\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_SINGLE_USER, QUERY_ME } from '../utils/queries';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst User = () => {\r\n  const { userId } = useParams();\r\n\r\n  // If there is no `userId` in the URL as a parameter, execute the `QUERY_ME` query instead for the logged in user's information\r\n  const { loading, data } = useQuery(\r\n    userId ? QUERY_SINGLE_USER : QUERY_ME,\r\n    {\r\n      variables: { userId: userId },\r\n    }\r\n  );\r\n\r\n  // Check if data is returning from the `QUERY_ME` query, then the `QUERY_SINGLE_USER` query\r\n  const user = data?.me || data?.user || {};\r\n\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!user?.username) {\r\n    return (\r\n      <section>\r\n      <div>\r\n      <Link className=\"btn btn-lg btn-primary m-2\" to=\"/Login\">\r\n            Login\r\n          </Link>\r\n          <p> </p>\r\n          <Link className=\"btn btn-lg btn-light m-2\" to=\"/Register\">\r\n            Register\r\n          </Link>\r\n      </div>\r\n\r\n      <p>\r\n        You need to be logged in. Use the navigation\r\n        links above to sign up or log in!\r\n      </p>\r\n      </section>\r\n    );\r\n  }\r\n  \r\n};\r\n\r\nexport default User;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login(username: $username, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($firstName: String!, $lastName: String!, $username: String!, $email: String!, $password: String!) {\r\n        addUser(firstName: $firstName, lastName: $lastName, username: $username, email: $email, password: $password){\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// export const ADD_POST = gql`\r\n//     mutation addPost(content: $String, likes: $Int, dislikes: $Int) {\r\n//         addPost(content: $content, likes: $likes, dislikes: $dislikes) {\r\n//             _id\r\n//             username\r\n//         }\r\n//     }\r\n// `;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n    getUser() {\r\n        return decode(this.getToken());\r\n    }\r\n\r\n    loggedIn() {\r\n        const token = this.getToken();\r\n        return !!token && !this.isTokenExpired(token);\r\n      }\r\n\r\n    isTokenExpired(token) {\r\n        const decoded = decode(token);\r\n        if (decoded.exp < Date.now() / 1000) {\r\n          localStorage.removeItem('id_token');\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n\r\n    getToken() {\r\n        return localStorage.getItem('id_token');\r\n    }\r\n\r\n    login(token) {\r\n      const decoded = decode(token);\r\n      console.log(decoded.data)\r\n        localStorage.setItem('id_token', token);\r\n        window.location.assign(`/me/${decoded.data._id}`);\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem('id_token');\r\n        window.location.reload();\r\n      }\r\n\r\n}\r\n\r\nexport default new AuthService();","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = (props) => {\r\n  const [formState, setFormState] = useState({ username: '', password: '' });\r\n  const [loginUser, { error, data }] = useMutation(LOGIN_USER);\r\n\r\nconst handleChange = (event) => {\r\n  const { name, value } = event.target;\r\n  setFormState({ ...formState, [name]: value });\r\n};\r\n\r\n// submit form\r\nconst handleFormSubmit = async (event) => {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  console.log(formState);\r\n  try {\r\n    const { data } = await loginUser({\r\n      variables: { ...formState },\r\n    });\r\n\r\n    Auth.login(data.login.token);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n\r\n  // clear form values\r\n  setFormState({\r\n    username: '',\r\n    password: '',\r\n  });\r\n};\r\n\r\nreturn (\r\n  <main className=\"flex-row justify-center mb-4\">\r\n    <div className=\"col-12 col-lg-10\">\r\n      <div className=\"card\">\r\n        <h4 className=\"card-header bg-dark text-light p-2\">Login</h4>\r\n        <div className=\"card-body\">\r\n          {data ? (\r\n            <p>\r\n          <div>Loading...</div>\r\n            </p>\r\n          ) : (\r\n        \r\n            <form onSubmit={handleFormSubmit}>\r\n              <input\r\n                placeholder=\"Your username\"\r\n                name=\"username\"\r\n                type=\"text\"\r\n                value={formState.username}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n             \r\n              <input\r\n                placeholder=\"******\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                value={formState.password}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              <button\r\n                className=\"btn btn-block btn-info\"\r\n                style={{ cursor: 'pointer' }}\r\n                type=\"submit\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"my-3 p-3 bg-danger text-white\">\r\n              {error.message}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </main>\r\n);\r\n  };\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_SINGLE_USER } from '../utils/queries';\r\n\r\nconst Profile = () => {\r\nconst { data } =  useQuery(QUERY_SINGLE_USER, {\r\n    fetchPolicy: \"no-cache\"\r\n});\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst Register = () => {\r\n  const [formState, setFormState] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [addUser, { error, data }] = useMutation(ADD_USER);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({ ...formState, [name]: value });\r\n  };\r\n\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    console.log(formState);\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    setFormState({\r\n      firstName: '',\r\n      lastName: '',\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Register</h4>\r\n          <div className=\"card-body\">\r\n            {data ? (\r\n              <p>\r\n                Success! You may now head{\" \"}\r\n                <Link to=\"/\">back to Login</Link>\r\n              </p>\r\n            ) : (\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  placeholder=\"Your first name\"\r\n                  name=\"firstName\"\r\n                  type=\"text\"\r\n                  value={formState.firstName}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  placeholder=\"Your last name\"\r\n                  name=\"lastName\"\r\n                  type=\"text\"\r\n                  value={formState.lastName}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  placeholder=\"Your username\"\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  value={formState.username}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  placeholder=\"Your email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  value={formState.email}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  placeholder=\"******\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={formState.password}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_SINGLE_USER, QUERY_ME } from '../utils/queries';\r\n/* import { Link } from 'react-router-dom';\r\nimport Auth from '../utils/auth'; */\r\n\r\nconst UserHome = () => {\r\n    const { userId } = useParams();\r\n\r\n    // If there is no `userId` in the URL as a parameter, execute the `QUERY_ME` query instead for the logged in user's information\r\n    const { loading, data } = useQuery(\r\n        userId ? QUERY_SINGLE_USER : QUERY_ME,\r\n        {\r\n            variables: { userId: userId },\r\n        }\r\n    );\r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <h4>\r\n            welcome to your timeline {data.user.firstName}\r\n        </h4>\r\n    )\r\n};\r\n\r\nexport default UserHome;","import React from 'react';\r\n\r\n  const Header = () => {\r\n\r\n  return (\r\n\r\n    <div>\r\n      <h2>Header</h2>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n/* import { useLocation, useNavigate } from 'react-router-dom'; */\r\n\r\nconst Footer = () => {\r\n/*   const location = useLocation();\r\n  const navigate = useNavigate(); */\r\n  return (\r\n    <footer>\r\n      <h1>Footer</h1>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\r\n\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\n// import Notifications from './pages/Notifications';\r\nimport Profile from './pages/Profile';\r\nimport Register from './pages/Register';\r\nimport UserHome from './pages/UserHome';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem(\"id_token\");\r\n\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : \"\",\r\n      },\r\n    });\r\n  },\r\n  uri: \"/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"flex-column justify-center align-center min-100-vh bg-primary\">\r\n          <Header />\r\n          <div className=\"container\">\r\n            <Routes>\r\n              <Route\r\n                path=\"/\"\r\n                element={<Home />}\r\n              />\r\n              <Route\r\n                path=\"/register\"\r\n                element={<Register />}\r\n              />\r\n              <Route\r\n                path=\"/login\"\r\n                element={<Login />}\r\n              />\r\n              <Route\r\n              path=\"/profile\"\r\n              element={<Profile />}\r\n              />\r\n              <Route\r\n                path=\"/me/:userId\"\r\n                element={<UserHome />}\r\n              />\r\n            </Routes>\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n/* const root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render( */\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}