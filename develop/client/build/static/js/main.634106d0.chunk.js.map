{"version":3,"sources":["utils/queries.js","pages/Home.js","utils/mutations.js","pages/Login.js","pages/Register.js","App.js","reportWebVitals.js","index.js"],"names":["QUERY_SINGLE_USER","gql","QUERY_ME","User","userId","useParams","useQuery","variables","loading","data","user","me","Auth","loggedIn","getUser","_id","to","username","LOGIN_USER","ADD_USER","Login","props","useState","password","formState","setFormState","useMutation","login","error","handleChange","event","target","value","handleFormSubmit","preventDefault","console","log","token","className","onSubmit","placeholder","name","type","onChange","style","cursor","message","Register","firstName","lastName","email","addUser","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","path","element","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.634106d0.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_USERS = gql`\r\n  query allUsers {\r\n    users {\r\n      _id\r\n      username\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_SINGLE_USER = gql`\r\n  query singleUser($userId: ID!) {\r\n    user(userId: $userId) {\r\n      _id\r\n      username\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Navigate, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\n\r\nimport { QUERY_SINGLE_USER, QUERY_ME } from '../utils/queries';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst User = () => {\r\n  const { userId } = useParams();\r\n\r\n  // If there is no `userId` in the URL as a parameter, execute the `QUERY_ME` query instead for the logged in user's information\r\n  const { loading, data } = useQuery(\r\n    userId ? QUERY_SINGLE_USER : QUERY_ME,\r\n    {\r\n      variables: { userId: userId },\r\n    }\r\n  );\r\n\r\n  // Check if data is returning from the `QUERY_ME` query, then the `QUERY_SINGLE_USER` query\r\n  const user = data?.me || data?.user || {};\r\n\r\n  // Use React Router's `<Navigate />` component to redirect to personal user page if username is yours\r\n  if (Auth.loggedIn() && Auth.getUser().data._id === userId) {\r\n    return <Navigate to=\"/me\" />;\r\n  }\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!user?.username) {\r\n    return (\r\n      <h4>\r\n        You need to be logged in to see your user page. Use the navigation\r\n        links above to sign up or log in!\r\n      </h4>\r\n    );\r\n  }\r\n\r\n  \r\n};\r\n\r\nexport default User;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login(username: $username, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($firstName: String!, $lastName: String!, $username: String!, $email: String!, $password: String!) {\r\n        addUser(firstName: $firstName, lastName: $lastName, username: $username, email: $email, password: $password){\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// export const ADD_POST = gql`\r\n//     mutation addPost(content: $String, likes: $Int, dislikes: $Int) {\r\n//         addPost(content: $content, likes: $likes, dislikes: $dislikes) {\r\n//             _id\r\n//             username\r\n//         }\r\n//     }\r\n// `;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Login = (props) => {\r\n    const [formState, setFormState] = useState({ username: '', password: '' });\r\n    const [login, { error, data }] = useMutation(LOGIN_USER);\r\n  \r\n    // update state based on form input changes\r\n    const handleChange = (event) => {\r\n      const { username, value } = event.target;\r\n  \r\n      setFormState({\r\n        ...formState,\r\n        [username]: value,\r\n      });\r\n    };\r\n  \r\n    // submit form\r\n    const handleFormSubmit = async (event) => {\r\n      event.preventDefault();\r\n      console.log(formState);\r\n      try {\r\n        const { data } = await login({\r\n          variables: { ...formState },\r\n        });\r\n  \r\n        Auth.login(data.login.token);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n  \r\n      // clear form values\r\n      setFormState({\r\n        username: '',\r\n        password: '',\r\n      });\r\n    };\r\n  \r\n    return (\r\n      <main className=\"flex-row justify-center mb-4\">\r\n        <div className=\"col-12 col-lg-10\">\r\n          <div className=\"card\">\r\n            <h4 className=\"card-header bg-dark text-light p-2\">Login</h4>\r\n            <div className=\"card-body\">\r\n              {data ? (\r\n                <p>\r\n                  Success! You may now head{' '}\r\n                  <Link to=\"/\">back to the homepage.</Link>\r\n                </p>\r\n              ) : (\r\n                <form onSubmit={handleFormSubmit}>\r\n                  <input\r\n                    className=\"form-input\"\r\n                    placeholder=\"Your username\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    value={formState.username}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <input\r\n                    className=\"form-input\"\r\n                    placeholder=\"******\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={formState.password}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <button\r\n                    className=\"btn btn-block btn-info\"\r\n                    style={{ cursor: 'pointer' }}\r\n                    type=\"submit\"\r\n                  >\r\n                    Submit\r\n                  </button>\r\n                </form>\r\n              )}\r\n  \r\n              {error && (\r\n                <div className=\"my-3 p-3 bg-danger text-white\">\r\n                  {error.message}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  };\r\n  \r\n  export default Login;\r\n  ","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst Register = () => {\r\n  const [formState, setFormState] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [addUser, { error, data }] = useMutation(ADD_USER);\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { username, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [username]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Register</h4>\r\n          <div className=\"card-body\">\r\n            {data ? (\r\n              <p>\r\n                Success! You may now head{\" \"}\r\n                <Link to=\"/\">back to the homepage.</Link>\r\n              </p>\r\n            ) : (\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your first name\"\r\n                  name=\"firstName\"\r\n                  type=\"text\"\r\n                  value={formState.firstName}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your last name\"\r\n                  name=\"lastName\"\r\n                  type=\"text\"\r\n                  value={formState.lastName}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your username\"\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  value={formState.username}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  value={formState.email}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"******\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={formState.password}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\r\n\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\n// import Notifications from './pages/Notifications';\r\n// import Profile from './pages/Profile';\r\nimport Register from './pages/Register';\r\n// import UserHome from './pages/UserHome';\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"flex-column justify-center align-center min-100-vh bg-primary\">\r\n          <Routes>\r\n          <Route \r\n              path=\"/\" \r\n              element={<Home />}\r\n            />\r\n          <Route \r\n              path=\"/Register\" \r\n              element={<Register />}\r\n            />\r\n          <Route \r\n              path=\"/Login\" \r\n              element={<Login />}\r\n            />\r\n           <Route \r\n              path=\"/Me\" \r\n              element={<userHome />}\r\n            />\r\n            <Route \r\n              path=\"/Me/:userId\" \r\n              element={<userHome />}\r\n            />\r\n            {/* <Route \r\n              path=\"/Feed/:id\" \r\n              element={<UserHome />}\r\n            />\r\n            <Route \r\n              path=\"/Profile/:id\" \r\n              element={<Profile />}\r\n            />\r\n            <Route \r\n              path=\"/Notifications/:id\" \r\n              element={<Notifications />}\r\n            /> */}\r\n          </Routes>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}